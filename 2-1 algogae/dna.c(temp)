#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAX_LEN 120
#define MAX_SEQ 5

void lcs(char *s1, char *s2, char *result) {
    int len1 = strlen(s1);
    int len2 = strlen(s2);
    int dp[MAX_LEN + 1][MAX_LEN + 1];

     for (int i = 0; i <= len1; i++){
        for (int j = 0; j <= len2; j++){
            dp[i][j] = 0;
        }
     }

      for (int i = 1; i <= len1; i++) {
        for (int j = 1; j <= len2; j++) {
            if (s1[i - 1] == s2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = (dp[i - 1][j] > dp[i][j - 1]) ? dp[i - 1][j] : dp[i][j - 1];
        }
    }

    int tmplen1 = len1;
    int tmplen2 = len2;
    int idx = dp[len1][len2];
    if (idx >= MAX_LEN) {
        idx = MAX_LEN - 1;
    }
    result[idx] = '\0'; 

    while (tmplen1 > 0 && tmplen2 > 0 &&idx>0) {
        if (s1[tmplen1 - 1] == s2[tmplen2 - 1]) {
            result[--idx] = s1[tmplen1 - 1];
            tmplen1--; 
            tmplen2--;
        } else if (dp[tmplen1 - 1][tmplen2] > dp[tmplen1][tmplen2 - 1])
            tmplen1--;
        else
            tmplen2--;
    }
}

void find_common_subsequence(int k, char sequences[MAX_SEQ][MAX_LEN], char *real_lcs) {
    char temp[MAX_LEN];
    lcs(sequences[0], sequences[1], temp);

    for (int i = 2; i < k; i++) {
        char next[MAX_LEN];
        lcs(temp, sequences[i], next);
        strcpy(temp, next);
    }

    strcpy(real_lcs, temp);
}

/*void rightshift(char *str, int start, int shiftlevel) {
    int len = strlen(str);

    for (int k = len; k >= start; k--) {
        str[k + shiftlevel] = str[k];
    }

    for (int k = 0; k < shiftlevel; k++) {
        str[start + k] = '-';
    }
}

int find_next_match_index(const char *str, int startpoint, char target) {
    for (int i = startpoint; str[i] != '\0'; i++) {
        if (str[i] == target) {
            
            return i;  // 조건을 만족하는 첫 번째 인덱스
        }
    }
    return -1;  // 못 찾았을 경우
}

// DNA Alignment Program
void align_to_lcs(char sequences[][MAX_LEN], int seq_num, const char *lcs, char aligned[][MAX_LEN*2]) {
    int lcs_len = strlen(lcs);
    int lcs_pos[MAX_LEN] = {'\0'};//aligned에서 몇 번째에 *이 들어가야하는지 알려줌
    int curr_lcs_pos=0;//현재 맞추려고 하는 lcs character의 index
    int aligned_len=0;//몇 번째 index까지 맞춰졌는지 
    for (int i = 0; i < seq_num; i++) {
        strcpy(aligned[i], sequences[i]);
    }
    for(int k=0;k<lcs_len;k++){
        for(int i=0;i<seq_num;i++){
            for(int j=0;j<strlen(sequences[i]);j++){
                if(sequences[i][j]==lcs[curr_lcs_pos]&&j>aligned_len){
                    lcs_pos[curr_lcs_pos]=j;
                    aligned_len=j;
                    break;
                
                    if(curr_lcs_pos==lcs_len){
                        break;
                    }
                }
            }
        
        }

        //여기에 gap 넣는 코드 작성
        for(int i=0;i<seq_num;i++){
            int shiftlevel=find_next_match_index(aligned[i], aligned_len-1, lcs[curr_lcs_pos])-(aligned_len-1);
            if(shiftlevel>0){
                rightshift(aligned[i], aligned_len, shiftlevel);
            }
        }

        curr_lcs_pos++;
        int lcs_pos_len=0;
        for (int i = 0; i < MAX_LEN; i++) {
            if (lcs_pos[i] == '\0') break;  // 0이 처음 나오는 지점까지 세기
            lcs_pos_len++;
            printf("%d ", lcs_pos_len);
        }
        lcs_pos[lcs_pos_len] = aligned_len;
    }
    
}*/

void rightshift(char *str, int start, int shiftlevel) {
    int len = strlen(str);
    if (len + shiftlevel >= MAX_LEN * 2) return; // 버퍼 오버플로우 방지
    for (int k = len; k >= start; k--) {
        str[k + shiftlevel] = str[k];
    }
    for (int k = 0; k < shiftlevel; k++) {
        str[start + k] = '-';
    }
}

int find_next_match_index(const char *str, int startpoint, char target) {
    for (int i = startpoint; str[i] != '\0'; i++) {
        if (str[i] == target) {
            return i;
        }
    }
    return -1;
}

void align_to_lcs(char sequences[][MAX_LEN], int seq_num, const char *lcs, char aligned[][MAX_LEN * 2]) {
    int lcs_len = strlen(lcs);
    int curr_pos[MAX_LEN] = {0}; // 각 시퀀스의 현재 위치
    int max_len = 0; // 최종 길이

    // aligned 초기화
    for (int i = 0; i < seq_num; i++) {
        strcpy(aligned[i], sequences[i]);
    }
    
    // 각 LCS 문자 처리
    for (int k = 0; k < lcs_len; k++) {
        int max_idx = -1;
        // 모든 시퀀스에서 현재 LCS 문자의 최대 인덱스 찾기
        for (int i = 0; i < seq_num; i++) {
            int idx = find_next_match_index(aligned[i], curr_pos[i], lcs[k]);
            if (idx == -1) return; // LCS 문자가 시퀀스에 없으면 종료
            if (idx > max_idx) max_idx = idx;
        }
        
        // 각 시퀀스에 갭 삽입
        for (int i = 0; i < seq_num; i++) {
            int curr_idx = find_next_match_index(aligned[i], curr_pos[i], lcs[k]);
            int shiftlevel = max_idx - curr_idx;
            if (shiftlevel > 0) {
                rightshift(aligned[i], curr_idx, shiftlevel);
            }
            curr_pos[i] = max_idx + 1; // 다음 위치로 이동
        }
       
    }
    
    // 최대 길이 계산 및 길이 맞춤
    for (int i = 0; i < seq_num; i++) {
        int len = strlen(aligned[i]);
        if (len > max_len) max_len = len;
    }
    for (int i = 0; i < seq_num; i++) {
        int len = strlen(aligned[i]);
        for (int j = len; j < max_len; j++) {
            if (j >= MAX_LEN * 2) break;
            aligned[i][j] = '-';
        }
        aligned[i][max_len] = '\0';
    }

    printf("%s, %d\n==============================\n",aligned[0],0);
    printf("%s, %d\n",aligned[1],1);
    printf("%s, %d\n",aligned[2],2);
    printf("%s, %d\n",aligned[3],3);
    printf("%s, %d\n==============================\n",aligned[4],4);

    // 별표 라인 생성
    aligned[seq_num][0] = '\0'; // 별표 라인 초기화
    for (int j = 0; j < max_len; j++) {
        char c = aligned[0][j];
        int same = 1;
        for (int i = 1; i < seq_num; i++) {
            if (aligned[i][j] != c || c == '-') {
                same = 0;
                break;
            }
        }
        aligned[seq_num][j] = same ? '*' : ' ';
    }
    aligned[seq_num][max_len] = '\0';
}
    
void print_final_result(char aligned[][MAX_LEN*2], int k) {
    for (int i = 0; i < k+1; i++) {
        printf("%s\n", aligned[i]);
    }
}

int main() {
    /*FILE *in = fopen("dna_input.txt", "r");
    FILE *out = fopen("dna_output.txt", "w");
    if (!in || !out) {
        fprintf(stderr, "File error\n");
        return 1;
    }

    // TODO: Implement alignment algorithm

    fclose(in);
    fclose(out);*/
    
    int num_of_seq = 5;
    char sequences[MAX_SEQ][MAX_LEN] = {
        "ATCCGATG",
        "TTGACAGGGTA",
        "GGTTGGCATG",
        "ATGACGATG",
        "TGGCGCCTA"
    };

    char lcs[MAX_LEN];
    
    find_common_subsequence(num_of_seq, sequences, lcs);

    char result_sequences[MAX_SEQ+1][MAX_LEN * 2];
    align_to_lcs(sequences, num_of_seq, lcs, result_sequences);
    print_final_result(result_sequences, num_of_seq);

    printf("Common subsequence of all sequences: %s\n", lcs);
    
    return 0;
}
